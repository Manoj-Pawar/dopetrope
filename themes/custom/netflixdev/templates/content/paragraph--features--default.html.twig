{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set icon %}
{{ content.field_feature_icon }}
{% endset %}

{# {% if paragraph.index == 0 %}
{% include '@molecules/feature/feature.twig' with {
  feature_fonticon_base_class: 'gear',
  feature_svg_base_class: icon|striptags|trim,
  feature_box__heading: content.field_title,
  feature_box__heading__base_class: 'services-content-heading',
  feature_box__body: content.field_body,  
} %}
{% elseif paragraph.index == 1 %}
{% include '@molecules/feature/feature.twig' with {
  feature_fonticon_base_class: 'flash',
  feature_svg_base_class: icon|striptags|trim,
  feature_box__heading: content.field_title,
  feature_box__heading__base_class: 'services-content-heading',
  feature_box__body: content.field_body,  
} %}
{% elseif paragraph.index == 2 %}
{% include '@molecules/feature/feature.twig' with {
  feature_fonticon_base_class: 'star',
  feature_svg_base_class: icon|striptags|trim,
  feature_box__heading: content.field_title,
  feature_box__heading__base_class: 'services-content-heading',
  feature_box__body: content.field_body,  
} %}
{% endif %} #}

<div {{ bem('feature', feature_box__modifiers, feature_box__blockname, feature_box__extra_classes) }}>
    {% include "@atoms/images/Font_icon/awesome_font_icon.twig" with {
      fonticon_base_class: content.field_icon_class.0['#markup'],
      svg_base_class: icon|striptags,
    } %}
    {{ title_prefix }}
    {% include "@atoms/text/headings/_heading.twig" with {
      heading_base_class: item.feature_box__heading__base_class|default('heading'),
      heading_level: 2,
      heading: content.field_title,
    } %}
    {{ title_suffix }}
    {% include "@atoms/text/text/01-paragraph.twig" with {
      paragraph_content: content.field_body,
    } %}
</div>  